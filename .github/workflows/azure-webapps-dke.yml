name: Build and deploy DKE solution

env:
  AZURE_WEBAPP_NAME: app-demo-dke-december-${{ github.run_id }}    # set this to the name of your Azure Web App including the runID of the GitHub Workflow
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  AZURE_WEBAPP_SKU: B1                # Set the SKU used by the app https://azure.microsoft.com/en-us/pricing/details/app-service/windows/#pricing
  AZURE_REGION: westeurope            # Set to your desired Azure region
  DOTNET_VERSION: '8.*'               # set this to the .net version to use
  DOMAIN_NAME: pocproject0.com        # set domain name of tenant
  DKE_PATH: iac/application/dke       # set path to the folder there DKE files are located

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  app-registration:
    runs-on: ubuntu-latest
    outputs:
      applicationId: ${{ env.appApplicationId }}
      newGuid: ${{ env.NEW_GUID }}

    steps:   
    - uses: actions/checkout@v3

    # Login to Azure
    - name: login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_SUB_PLATFORM_DKE }}

    # Update account in permission file
    - name: update parameter file
      run: |
        # Update permission.json with the new principalId using jq (in-place)
        # This must be the groups object ID in the principalId field, since it's the group that has the PIM permission and not the members.
        jq --arg principalId ${{ vars.SP_GRP_OBJECT_ID }} \
          '.principalId = $principalId' \
          ${{ env.DKE_PATH }}/permission.json > tmp.json && mv tmp.json ${{ env.DKE_PATH }}/permission.json

    # PIM for application registration permissions
    - name: pim account
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |      
          # Define variables
          API_URL="https://graph.microsoft.com/v1.0/roleManagement/directory/roleAssignmentScheduleRequests"
          BODY_FILE="${{ env.DKE_PATH }}/permission.json"
          HEADERS="Content-Type=application/json"

          # Extract the role definition and principal from the permission.json
          PRINCIPAL_ID=$(jq -r '.principalId' $BODY_FILE)
          ROLE_DEFINITION_ID=$(jq -r '.roleDefinitionId' $BODY_FILE)

          # Check if the role assignment already exists using az rest GET
          EXISTING_ASSIGNMENTS=$(az rest --method GET \
            --url "https://graph.microsoft.com/v1.0/roleManagement/directory/roleAssignments" \
            --query "value[?roleDefinitionId=='$ROLE_DEFINITION_ID' && principalId=='$PRINCIPAL_ID']" -o json)

          # Check if the response is empty
          if [[ "$EXISTING_ASSIGNMENTS" == "[]" ]]; then
            echo "Role assignment does not exist. Creating a new role assignment request..."
            # Create the role assignment request
            az rest --method POST \
              --url "$API_URL" \
              --body @$BODY_FILE \
              --headers "$HEADERS"

            # Set variables for the loop if a new role assignment was created
            RETRY_COUNT=0
            MAX_RETRIES=10
            SLEEP_DURATION=15  # Wait 15 seconds between retries

            # Loop to verify the role assignment has taken effect
            echo "Verifying if the role assignment has been applied for principalId: $PRINCIPAL_ID"
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              echo "Checking role assignment... Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"

              # Check if the role assignment is now present
              CURRENT_ASSIGNMENTS=$(az rest --method GET \
                --url "https://graph.microsoft.com/v1.0/roleManagement/directory/roleAssignments" \
                --query "value[?roleDefinitionId=='$ROLE_DEFINITION_ID' && principalId=='$PRINCIPAL_ID']" -o json)

              # If the role assignment is found, exit the loop
              if [[ "$CURRENT_ASSIGNMENTS" != "[]" ]]; then
                echo "Role assignment successfully applied."
                break
              else
                echo "Role assignment has not taken effect yet. Retrying in $SLEEP_DURATION seconds..."
                sleep $SLEEP_DURATION
                RETRY_COUNT=$((RETRY_COUNT + 1))
              fi
            done

            # If the role assignment was not applied after MAX_RETRIES, exit with an error
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Error: Role assignment has not been applied within the expected time."
              exit 1
            fi
          else
            echo "Role assignment already exists. Skipping creation and validation."
          fi

    # Clear credentials
    - name: clear credentials
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          # Native Az cleanup methods
          az account clear
          az logout
          
          # Bruteforce cleanup of Az token
            CACHE_FILES=("~/.azure/msal_token_cache.bin" "~/.azure/msal_token_cache.json" "~/.IdentityService/msal.cache" "~/.azure/msal_http_cache.bin")

            # Loop through the files and clear them if they exist
            for file in "${CACHE_FILES[@]}"; do
                # Expand the ~ to the full home directory path
                file_path=$(eval echo $file)

                # Log the directory we are looking into
                directory=$(dirname "$file_path")
                echo "Looking in directory: $directory"

                # Check if the file exists and clear it if it does
                if [ -f "$file_path" ]; then
                echo "Clearing file: $file_path"
                rm -f "$file_path"
                else
                echo "File not found: $file_path"
                fi
            done

    # Re-login to Azure
    - name: login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_SUB_PLATFORM_DKE }}
  
    # Create app
    - name: create app
      uses: azure/cli@v2
      id: create-app
      with:
        azcliversion: latest
        inlineScript: |
          # Create the Azure AD app and capture the output
          output=$(az ad app create --display-name ${{ env.AZURE_WEBAPP_NAME }})
          
          # Extract the objectId from the output
          appObjectId=$(echo "$output" | jq -r '.id')

          # Extract the applicationId from the output
          appApplicationId=$(echo "$output" | jq -r '.appId')
          
          # Write to variables
          echo "appObjectId=$appObjectId" >> $GITHUB_ENV
          echo "appApplicationId=$appApplicationId" >> $GITHUB_ENV

    # Generate GUID for uniqueness
    - name: Generate GUID
      run: |
        NEW_GUID=$(python3 -c 'import uuid; print(uuid.uuid4())')
        echo "Generated GUID: $NEW_GUID"
        echo "NEW_GUID=$NEW_GUID" >> $GITHUB_ENV

    # Update manifest main file
    - name: update manifest main file
      run: |
        # Use jq to update specific keys with appropriate values
        jq --arg fqdm "${{ env.AZURE_WEBAPP_NAME }}.${{ env.DOMAIN_NAME }}" \
          --arg appName "${{ env.AZURE_WEBAPP_NAME }}" \
          --arg newGuid "${{ env.NEW_GUID }}" \
          '
            # Update the specific keys with appropriate values
            .identifierUris = ["https://\($fqdm)"] |
            .api.oauth2PermissionScopes |= map(
              .adminConsentDescription = $appName |
              .adminConsentDisplayName = $appName |
              .id = $newGuid
            ) |
            .web.redirectUriSettings |= map(
              .uri = "https://\($fqdm)"
            )
          ' ${{ env.DKE_PATH }}/manifest_main.json > ${{ env.DKE_PATH }}/updated_main.json

        # Replace the original file with the updated one
        mv ${{ env.DKE_PATH }}/updated_main.json ${{ env.DKE_PATH }}/manifest_main.json

    # Update manifest api file
    - name: update manifest api file
      run: |
        # Use jq to update specific keys with appropriate values
        jq --arg newGuid "${{ env.NEW_GUID }}" \
          '.api.preAuthorizedApplications |= map(
            .delegatedPermissionIds = [$newGuid]
          )' ${{ env.DKE_PATH }}/manifest_api.json > ${{ env.DKE_PATH }}/updated_api.json

        # Replace the original file with the updated one
        mv ${{ env.DKE_PATH }}/updated_api.json ${{ env.DKE_PATH }}/manifest_api.json
  
    # Update app with DKE configuration (configuration related to the DKE)
    - name: update app with manifest DKE
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az rest --method PATCH \
          --uri "https://graph.microsoft.com/v1.0/applications/${{ env.appObjectId }}" \
          --body @${{ env.DKE_PATH }}/manifest_main.json \
          --headers "Content-Type=application/json"
  
    # Update app with API configuration (client applications that can access the DKE)
    - name: update  app with manifest API
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az rest --method PATCH \
          --uri "https://graph.microsoft.com/v1.0/applications/${{ env.appObjectId }}" \
          --body @${{ env.DKE_PATH }}/manifest_api.json \
          --headers "Content-Type=application/json"

    - name: logout of azure
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az logout

  build:
    runs-on: ubuntu-latest
    needs: app-registration

    steps:
      - uses: actions/checkout@v3
      
      # Configure .Net
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      # Setup dependencies for .Net
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # List files in folder
      - name: List files in folder
        run: ls $GITHUB_WORKSPACE/src/customer-key-store

      # Create encryption keys
      - name: Generate SSL Keys
        run: |
          openssl req -x509 -newkey rsa:2048 -keyout $GITHUB_WORKSPACE/key.pem -out $GITHUB_WORKSPACE/cert.pem -days 365 -passout pass:${{ needs.app-registration.outputs.newGuid }} -subj "${{vars.KEY_ATTRIBUTES}}"
          openssl rsa -in $GITHUB_WORKSPACE/key.pem -out $GITHUB_WORKSPACE/privkeynopass.pem -outform PEM -traditional -passin pass:${{ needs.app-registration.outputs.newGuid }}
          openssl rsa -in $GITHUB_WORKSPACE/key.pem -pubout > $GITHUB_WORKSPACE/pubkeyonly.pem -passin pass:${{ needs.app-registration.outputs.newGuid }}

      # Set variables
      - name: Set environment variables
        run: |
          echo "JSON_FILE_PATH="${{ github.workspace }}/src/customer-key-store/appsettings.json"" >> $GITHUB_ENV
          echo "newClientId=${{ needs.app-registration.outputs.applicationId }}" >> $GITHUB_ENV
          echo "newTenantId=${{vars.TENANT_ID }}" >> $GITHUB_ENV
          echo "newValidIssuer=${{vars.VALID_ISSUER}}" >> $GITHUB_ENV
          echo "newJwtAudience=https://${{ env.AZURE_WEBAPP_NAME }}.${{ env.DOMAIN_NAME }}" >> $GITHUB_ENV
          echo "newValueKeyName=${{vars.KEY_NAME}}" >> $GITHUB_ENV
          echo "newValueKeyId=${{ needs.app-registration.outputs.newGuid }}" >> $GITHUB_ENV
          echo "newValueEmail=${{vars.EMAILS}}" >> $GITHUB_ENV
          echo "newPublicPem=$GITHUB_WORKSPACE/pubkeyonly.pem" >> $GITHUB_ENV
          echo "newPrivatePem=$GITHUB_WORKSPACE/privkeynopass.pem" >> $GITHUB_ENV
  
      # Replace values in appsettings.json
      - name: Update JSON file
        run: python ${{ github.workspace }}/src/customer-key-store/scripts/replace.py
      
      # Show the updated JSON
      - name: Display updated JSON file
        if: false  # Enable or disable the step
        run: cat ${{ github.workspace }}/src/customer-key-store/appsettings.json

      # Build the application
      - name: Build with dotnet
        run: dotnet build ${{ github.workspace }}/src/customer-key-store/customerkeystore.csproj --configuration Release

      - name: dotnet publish
        run: dotnet publish ${{ github.workspace }}/src/customer-key-store/customerkeystore.csproj -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp
      
      # Save certificates for debug purpose
      - name: Archive Certificates
        uses: actions/upload-artifact@v3
        if: false  # Enable or disable the step
        with:
          name: certificates
          path: |
            privkeynopass.pem
            pubkeyonly.pem

  setup-azure:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_SUB_PLATFORM_DKE }}

      - name: Create Resource Group
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az group create --name rg-${{ env.AZURE_WEBAPP_NAME }} --location ${{ env.AZURE_REGION }}

      - name: Create App Service Plan
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az appservice plan create \
            --name plan-${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group rg-${{ env.AZURE_WEBAPP_NAME }} \
            --sku ${{ env.AZURE_WEBAPP_SKU }}

      - name: Create Azure Web App
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az webapp create \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group rg-${{ env.AZURE_WEBAPP_NAME }} \
            --plan plan-${{ env.AZURE_WEBAPP_NAME }} \
            --runtime "dotnet:8"
      
      - name: Logout
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az logout

  deploy-app:
    runs-on: ubuntu-latest
    needs: [setup-azure, build]
    environment:
      name: 'Development'
    outputs:
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app

      # Login to Azure
      - name: login to azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_SUB_PLATFORM_DKE }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: logout of azure
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az logout

  configure-dns:
    runs-on: ubuntu-latest
    needs: deploy-app

    steps:
        # Login to Azure
        - name: login to azure
          uses: azure/login@v2
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS_SUB_PLATFORM_DKE }}
                    
        # Install Azure Resource Graph extension
        - name: Install az graph extension
          uses: azure/cli@v2
          with:
            azcliversion: latest
            inlineScript: |
                az extension add --name resource-graph --upgrade -y

        # Retrieve the custom domain verification ID from Azure Resource Graph
        - name: Get custom domain verification ID
          id: get_verification_id
          uses: azure/cli@v2
          with:
            azcliversion: latest
            inlineScript: |
                CUSTOM_DOMAIN_VERIFICATION_ID=$(az graph query -q "Resources | where type == 'microsoft.web/sites' and name == '${{ env.AZURE_WEBAPP_NAME }}' | project name, properties.customDomainVerificationId, type" --query "data[0].properties_customDomainVerificationId" -o tsv)
                
                # Store the result in a secret for future use (never expose to logs)
                echo "::add-mask::$CUSTOM_DOMAIN_VERIFICATION_ID"  # Mask the value in the logs for security
                echo "CUSTOM_DOMAIN_VERIFICATION_ID=$CUSTOM_DOMAIN_VERIFICATION_ID" >> $GITHUB_ENV

        # Add TXT Record to Azure DNS for domain verification
        - name: Verify DNS propagation for custom domain
          uses: azure/cli@v2
          with:
            azcliversion: latest
            inlineScript: |
                MAX_RETRIES=10
                SLEEP_DURATION=15  # 30 seconds delay between retries
                RETRY_COUNT=0
                RECORD_NAME="asuid.${{ env.AZURE_WEBAPP_NAME }}"
                CUSTOM_DOMAIN_VERIFICATION_ID="${{ env.CUSTOM_DOMAIN_VERIFICATION_ID }}"
                DOMAIN_NAME="${{ env.DOMAIN_NAME }}"
                AZURE_DNS_SUBSCRIPTION_ID="${{ secrets.AZURE_DNS_SUBSCRIPTION_ID }}"
                AZURE_DNS_RESOURCE_GROUP="${{ secrets.AZURE_DNS_RESOURCE_GROUP }}"
                
                # Check if the TXT record already exists
                DNS_OUTPUT=$(az network dns record-set txt show \
                    --subscription $AZURE_DNS_SUBSCRIPTION_ID \
                    --resource-group $AZURE_DNS_RESOURCE_GROUP \
                    --zone-name $DOMAIN_NAME \
                    --name "$RECORD_NAME" \
                    --query "{name: name, value: TXTRecords[0].value[0]}" -o json || true)  # Suppress errors if record doesn't exist

                DNS_NAME=$(echo $DNS_OUTPUT | jq -r '.name // empty')
                DNS_VALUE=$(echo $DNS_OUTPUT | jq -r '.value // empty')
                
                if [ "$DNS_NAME" = "$RECORD_NAME" ] && [ "$DNS_VALUE" = "$CUSTOM_DOMAIN_VERIFICATION_ID" ]; then
                    echo "DNS TXT record already exists with correct name: $DNS_NAME and value: $DNS_VALUE"
                else
                    echo "DNS TXT record not found or does not match. Creating it now..."

                # Create the TXT record
                az network dns record-set txt add-record \
                    --subscription $AZURE_DNS_SUBSCRIPTION_ID \
                    --resource-group $AZURE_DNS_RESOURCE_GROUP \
                    --zone-name $DOMAIN_NAME \
                    --record-set-name "$RECORD_NAME" \
                    --value "$CUSTOM_DOMAIN_VERIFICATION_ID"

                # Verify propagation
                while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                    # Query the DNS TXT record
                    DNS_OUTPUT=$(az network dns record-set txt show \
                        --subscription $AZURE_DNS_SUBSCRIPTION_ID \
                        --resource-group $AZURE_DNS_RESOURCE_GROUP \
                        --zone-name $DOMAIN_NAME \
                        --name $RECORD_NAME \
                        --query "{name: name, value: TXTRecords[0].value[0]}" -o json || true)

                    DNS_NAME=$(echo $DNS_OUTPUT | jq -r '.name // empty')
                    DNS_VALUE=$(echo $DNS_OUTPUT | jq -r '.value // empty')

                    if [ "$DNS_NAME" = "$RECORD_NAME" ] && [ "$DNS_VALUE" = "$CUSTOM_DOMAIN_VERIFICATION_ID" ]; then
                        echo "DNS TXT record found with matching name and value. Propagation successful."
                        break
                    else
                        echo "DNS record not found or does not match yet. Retrying in $SLEEP_DURATION seconds..."
                        sleep $SLEEP_DURATION
                        RETRY_COUNT=$((RETRY_COUNT + 1))
                    fi
                done

                    if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                        echo "Error: DNS record has not propagated within the expected time or does not match."
                        exit 1
                    fi
                fi

        # Verify with nslookup or dig to ensure external resolution
        - name: Verify DNS TXT Record Externally
          if: false  # Enable or disable the step
          run: |
            MAX_RETRIES=10
            SLEEP_DURATION=30  # 30 seconds delay between retries
            RETRY_COUNT=0
            RECORD_NAME="asuid.${{ env.AZURE_WEBAPP_NAME }}"
            DOMAIN_NAME="${{ env.DOMAIN_NAME }}"
            CUSTOM_DOMAIN_VERIFICATION_ID="${{ env.CUSTOM_DOMAIN_VERIFICATION_ID }}"

            echo "Verifying TXT record externally..."
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                # Use nslookup to check for the DNS TXT record propagation
                EXTERNAL_RECORD=$(nslookup -type=txt $RECORD_NAME.$DOMAIN_NAME | grep "$CUSTOM_DOMAIN_VERIFICATION_ID")

                if [ "$EXTERNAL_RECORD" != "" ]; then
                    echo "External DNS verification successful. Record value: $EXTERNAL_RECORD"
                    break
                else
                    echo "External DNS record not found yet. Retrying in $SLEEP_DURATION seconds..."
                    sleep $SLEEP_DURATION
                    RETRY_COUNT=$((RETRY_COUNT + 1))
                fi
            done

            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "Error: External DNS record has not propagated within the expected time."
                exit 1
            fi

            echo "DNS record successfully verified externally."

        - name: Add and Verify CNAME Record for Custom Domain
          uses: azure/cli@v2
          with:
            azcliversion: latest
            inlineScript: |
                MAX_RETRIES=10
                SLEEP_DURATION=15  # 30 seconds delay between retries
                RETRY_COUNT=0
                DESTINATION_DNS=$(echo "${{ needs.deploy-app.outputs.url }}" | sed 's|https\?://||')
                SOURCE_DNS="${{ env.AZURE_WEBAPP_NAME }}.${{ env.DOMAIN_NAME }}"
                DOMAIN_NAME="${{ env.DOMAIN_NAME }}"
                AZURE_DNS_SUBSCRIPTION_ID="${{ secrets.AZURE_DNS_SUBSCRIPTION_ID }}"
                AZURE_DNS_RESOURCE_GROUP="${{ secrets.AZURE_DNS_RESOURCE_GROUP }}"
                AZURE_APP_NAME="${{ env.AZURE_WEBAPP_NAME }}"

                # Check if the CNAME record already exists
                CNAME_OUTPUT=$(az network dns record-set cname show \
                    --subscription $AZURE_DNS_SUBSCRIPTION_ID \
                    --resource-group $AZURE_DNS_RESOURCE_GROUP \
                    --zone-name $DOMAIN_NAME \
                    --name "$AZURE_APP_NAME" \
                    --query "{name: name, cnameRecord: CNAMERecord.cname}" -o json || true)

                CNAME_SOURCE=$(echo $CNAME_OUTPUT | jq -r '.name // empty')
                CNAME_DESTINATION=$(echo $CNAME_OUTPUT | jq -r '.cnameRecord // empty')

                if [ "$CNAME_SOURCE" = "$AZURE_APP_NAME" ] && [ "$CNAME_DESTINATION" = "$DESTINATION_DNS" ]; then
                    echo "CNAME record already exists with correct source: $CNAME_SOURCE and destination: $CNAME_DESTINATION"
                else
                    echo "CNAME record not found or does not match. Creating it now..."

                    # Create the CNAME record
                    az network dns record-set cname set-record \
                        --subscription $AZURE_DNS_SUBSCRIPTION_ID \
                        --resource-group $AZURE_DNS_RESOURCE_GROUP \
                        --zone-name $DOMAIN_NAME \
                        --record-set-name "$AZURE_APP_NAME" \
                        --cname "$DESTINATION_DNS"

                    # Verify propagation
                    while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                        # Query the DNS CNAME record
                        CNAME_OUTPUT_VERIFY=$(az network dns record-set cname show \
                            --subscription $AZURE_DNS_SUBSCRIPTION_ID \
                            --resource-group $AZURE_DNS_RESOURCE_GROUP \
                            --zone-name $DOMAIN_NAME \
                            --name $AZURE_APP_NAME \
                            --query "{name: name, cnameRecord: CNAMERecord.cname}" -o json || true)

                        CNAME_SOURCE_VERIFY=$(echo $CNAME_OUTPUT_VERIFY | jq -r '.name // empty')
                        CNAME_DESTINATION_VERIFY=$(echo $CNAME_OUTPUT_VERIFY | jq -r '.cnameRecord // empty')

                        if [ "$CNAME_SOURCE" = "$AZURE_APP_NAME" ] && [ "$CNAME_DESTINATION" = "$DESTINATION_DNS" ]; then
                            echo "CNAME record found with matching source and destination. Propagation successful."
                            break
                        else
                            echo "CNAME record not found or does not match yet. Retrying in $SLEEP_DURATION seconds..."
                            sleep $SLEEP_DURATION
                            RETRY_COUNT=$((RETRY_COUNT + 1))
                        fi
                    done

                    if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                        echo "Error: CNAME record has not propagated within the expected time or does not match."
                        exit 1
                    fi
                fi
        
        # Add Custom Domain to Web App
        - name: Add Custom Domain to Web App
          uses: azure/cli@v2
          with:
            azcliversion: latest
            inlineScript: |
                # Add the custom domain to the Azure Web App
                az webapp config hostname add \
                --resource-group rg-${{ env.AZURE_WEBAPP_NAME }} \
                --webapp-name ${{ env.AZURE_WEBAPP_NAME }} \
                --hostname ${{ env.AZURE_WEBAPP_NAME }}.${{ env.DOMAIN_NAME }}

        # Enable HTTPS for Custom Domain
        - name: Enable HTTPS for Custom Domain
          uses: azure/cli@v2
          with:
            azcliversion: latest
            inlineScript: |
                # Enable HTTPS with a managed certificate
                az webapp config ssl bind \
                --resource-group rg-${{ env.AZURE_WEBAPP_NAME }} \
                --name ${{ env.AZURE_WEBAPP_NAME }} \
                --ssl-type SNI \
                --certificate-thumbprint $(az webapp config ssl create \
                    --resource-group rg-${{ env.AZURE_WEBAPP_NAME }} \
                    --name ${{ env.AZURE_WEBAPP_NAME }} \
                    --hostname ${{ env.AZURE_WEBAPP_NAME }}.${{ env.DOMAIN_NAME }} \
                    --query "thumbprint" -o tsv)

        - name: logout of azure
          uses: azure/cli@v2
          with:
            azcliversion: latest
            inlineScript: |
                az logout
