name: Build and deploy ASP.Net Core app to an Azure Web App

env:
  AZURE_WEBAPP_NAME: app-demo-dke    # set this to the name of your Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '7.*'                 # set this to the .NET Core version to use

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      # Configure .Net
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Configure Javascript
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      
      # Setup dependencies for .Net
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Setup dependencies for Javascript
      - name: Install dependencies
        run: npm install

      # List files in folder
      - name: List files in folder
        run: ls $GITHUB_WORKSPACE/src/customer-key-store

      # Generate GUID
      - name: Generate GUID
        id: generate_guid
        run: echo "::set-output name=guid::$(cat /proc/sys/kernel/random/uuid)"

      - name: Set up Environment
        run: echo "newGUID=${{ steps.generate_guid.outputs.guid }}" >> $GITHUB_ENV

      # Create encryption keys
      - name: Generate SSL Keys
        run: |
          openssl req -x509 -newkey rsa:2048 -keyout $GITHUB_WORKSPACE/key.pem -out $GITHUB_WORKSPACE/cert.pem -days 365 -passout pass:$newGUID -subj "/C=DK/ST=Jutland/L=Aarhus/O=TDCErhverv/OU=Cloudkey/CN=CloudkeyDKE"
          openssl rsa -in $GITHUB_WORKSPACE/key.pem -out $GITHUB_WORKSPACE/privkeynopass.pem -outform PEM -passin pass:$newGUID
          openssl rsa -in $GITHUB_WORKSPACE/key.pem -pubout > $GITHUB_WORKSPACE/pubkeyonly.pem -passin pass:$newGUID

      # Set variables
      - name: Set environment variables
        run: |
          echo "JSON_FILE_PATH="${{ github.workspace }}\\src\\customer-key-store\\appsettings.json"" >> $GITHUB_ENV
          echo "newClientId=your_new_client_id" >> $GITHUB_ENV
          echo "newTenantId=${{ secrets.AZUREAPPSERVICE_TENANTID_E59CD09D1D1F405AA7C62E286ABBBDA4 }}" >> $GITHUB_ENV
          echo "newValidIssuer="https://sts.windows.net/valueTenantId1/","https://sts.windows.net/valueTenantId2/"" >> $GITHUB_ENV
          echo "newJwtAudience=new_jwt_audience_url" >> $GITHUB_ENV
          echo "newValueKeyName=new_test_key_name" >> $GITHUB_ENV
          echo "newValueKeyId=$newGUID" >> $GITHUB_ENV
          echo "newValueEmail="email1@example.com","email2@example.com"" >> $GITHUB_ENV
          echo "newPublicPem="$(openssl x509 -pubkey -noout -in $GITHUB_WORKSPACE/cert.pem)"" >> $GITHUB_ENV
          echo "newPrivatePem="$(openssl rsa -in $GITHUB_WORKSPACE/privkeynopass.pem)"" >> $GITHUB_ENV
  
      # Replace values in appsettings.json
      - name: Update JSON file
        run: python replaceValues.py
      
      # Show the updated JSON
      - name: Display updated JSON file
        run: cat ${{ github.workspace }}/src/customer-key-store/appsettings.json

      # Build the application
      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_8F9F7A9065A94E829D877F2D8D007EA6 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_E59CD09D1D1F405AA7C62E286ABBBDA4 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_256FCBF228EC44FAA973E4A43861AE89 }}
      
      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: logout
        run: |
          az logout
