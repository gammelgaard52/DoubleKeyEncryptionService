name: Build and deploy ASP.Net Core app to an Azure Web App

env:
  AZURE_WEBAPP_NAME: app-demo-dke-december-${{ github.run_id }}    # set this to the name of your Azure Web App including the runID of the GitHub Workflow
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '8.*'                 # set this to the .NET Core version to use
  DOMAIN_NAME: pocproject0.com        # set domain name of tenant
  DKE_PATH: iac/application/dke       # set path to the folder there DKE files are located

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  app-registration:
    runs-on: ubuntu-latest

    steps:   
    - uses: actions/checkout@v3

    # Login to Azure
    - name: login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_SUB_PLATFORM_DKE }}

    # Update account in permission file
    - name: update parameter file
      run: |
        # Update permission.json with the new principalId using jq (in-place)
        # This must be the groups object ID in the principalId field, since it's the group that has the PIM permission and not the members.
        jq --arg principalId ${{ vars.SP_GRP_OBJECT_ID }} \
          '.principalId = $principalId' \
          ${{ env.DKE_PATH }}/permission.json > tmp.json && mv tmp.json ${{ env.DKE_PATH }}/permission.json

    # Generate GUID for uniqueness
    - name: Generate GUID
      run: |
        NEW_GUID=$(python3 -c 'import uuid; print(uuid.uuid4())')
        echo "Generated GUID: $NEW_GUID"
        echo "NEW_GUID=$NEW_GUID" >> $GITHUB_ENV

    # Update manifest main file
    - name: update manifest main
      run: |
        # Use jq to update specific keys with appropriate values
        jq --arg fqdm "${{ env.AZURE_WEBAPP_NAME }}.${{ env.DOMAIN_NAME }}" \
          --arg appName "${{ env.AZURE_WEBAPP_NAME }}" \
          --arg newGuid "${{ env.NEW_GUID }}" \
          '
            # Update the specific keys with appropriate values
            .identifierUris = ["https://\($fqdm)"] |
            .api.oauth2PermissionScopes |= map(
              .adminConsentDescription = $appName |
              .adminConsentDisplayName = $appName |
              .id = $newGuid
            ) |
            .web.redirectUriSettings |= map(
              .uri = "https://\($fqdm)"
            )
          ' ${{ env.DKE_PATH }}/manifest_main.json > ${{ env.DKE_PATH }}/updated_main.json

        # Replace the original file with the updated one
        mv ${{ env.DKE_PATH }}/updated_main.json ${{ env.DKE_PATH }}/manifest_main.json

    # Update manifest api file
    - name: update manifest api
      run: |
        # Use jq to update specific keys with appropriate values
        jq --arg newGuid "${{ env.NEW_GUID }}" \
          '.api.preAuthorizedApplications |= map(
            .delegatedPermissionIds = [$newGuid]
          )' ${{ env.DKE_PATH }}/manifest_api.json > ${{ env.DKE_PATH }}/updated_api.json

        # Replace the original file with the updated one
        mv ${{ env.DKE_PATH }}/updated_api.json ${{ env.DKE_PATH }}/manifest_api.json

    # PIM for application registration permissions
    - name: pim account
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |      
          # Define variables
          API_URL="https://graph.microsoft.com/v1.0/roleManagement/directory/roleAssignmentScheduleRequests"
          BODY_FILE="${{ env.DKE_PATH }}/permission.json"
          HEADERS="Content-Type=application/json"

          # Extract the role definition and principal from the permission.json
          PRINCIPAL_ID=$(jq -r '.principalId' $BODY_FILE)
          ROLE_DEFINITION_ID=$(jq -r '.roleDefinitionId' $BODY_FILE)

          # Check if the role assignment already exists using az rest GET
          EXISTING_ASSIGNMENTS=$(az rest --method GET \
            --url "https://graph.microsoft.com/v1.0/roleManagement/directory/roleAssignments" \
            --query "value[?roleDefinitionId=='$ROLE_DEFINITION_ID' && principalId=='$PRINCIPAL_ID']" -o json)

          # Check if the response is empty
          if [[ "$EXISTING_ASSIGNMENTS" == "[]" ]]; then
            echo "Role assignment does not exist. Creating a new role assignment request..."
            # Create the role assignment request
            az rest --method POST \
              --url "$API_URL" \
              --body @$BODY_FILE \
              --headers "$HEADERS"

            # Set variables for the loop if a new role assignment was created
            RETRY_COUNT=0
            MAX_RETRIES=10
            SLEEP_DURATION=15  # Wait 15 seconds between retries

            # Loop to verify the role assignment has taken effect
            echo "Verifying if the role assignment has been applied for principalId: $PRINCIPAL_ID"
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              echo "Checking role assignment... Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"

              # Check if the role assignment is now present
              CURRENT_ASSIGNMENTS=$(az rest --method GET \
                --url "https://graph.microsoft.com/v1.0/roleManagement/directory/roleAssignments" \
                --query "value[?roleDefinitionId=='$ROLE_DEFINITION_ID' && principalId=='$PRINCIPAL_ID']" -o json)

              # If the role assignment is found, exit the loop
              if [[ "$CURRENT_ASSIGNMENTS" != "[]" ]]; then
                echo "Role assignment successfully applied."
                break
              else
                echo "Role assignment has not taken effect yet. Retrying in $SLEEP_DURATION seconds..."
                sleep $SLEEP_DURATION
                RETRY_COUNT=$((RETRY_COUNT + 1))
              fi
            done

            # If the role assignment was not applied after MAX_RETRIES, exit with an error
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Error: Role assignment has not been applied within the expected time."
              exit 1
            fi
          else
            echo "Role assignment already exists. Skipping creation and validation."
          fi
  
    # Create app
    - name: create app
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          # Create the Azure AD app and capture the output
          output=$(az ad app create --display-name ${{ env.AZURE_WEBAPP_NAME }})
          
          # Extract the objectId from the output
          appObjectId=$(echo "$output" | jq -r '.id')

          # Extract the applicationId from the output
          appApplicationId=$(echo "$output" | jq -r '.appId')
          
          # Write to variables
          echo "appObjectId=$appObjectId" >> $GITHUB_ENV
          echo "appApplicationId=$appApplicationId" >> $GITHUB_ENV
  
    # Update app with DKE configuration (configuration related to the DKE)
    - name: update manifest DKE
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az rest --method PATCH \
          --uri "https://graph.microsoft.com/v1.0/applications/${{ env.appObjectId }}" \
          --body @${{ env.DKE_PATH }}/manifest_main.json \
          --headers "Content-Type=application/json"
  
    # Update app with API configuration (client applications that can access the DKE)
    - name: update manifest API
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az rest --method PATCH \
          --uri "https://graph.microsoft.com/v1.0/applications/${{ env.appObjectId }}" \
          --body @${{ env.DKE_PATH }}/manifest_api.json \
          --headers "Content-Type=application/json"

  build:
    runs-on: ubuntu-latest
    needs: app-registration

    steps:
      - uses: actions/checkout@v3
      
      # Configure .Net
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      # Setup dependencies for .Net
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # List files in folder
      - name: List files in folder
        run: ls $GITHUB_WORKSPACE/src/customer-key-store

      # Create encryption keys
      - name: Generate SSL Keys
        run: |
          openssl req -x509 -newkey rsa:2048 -keyout $GITHUB_WORKSPACE/key.pem -out $GITHUB_WORKSPACE/cert.pem -days 365 -passout pass:${{ env.NEW_GUID }} -subj "${{vars.KEY_ATTRIBUTES}}"
          openssl rsa -in $GITHUB_WORKSPACE/key.pem -out $GITHUB_WORKSPACE/privkeynopass.pem -outform PEM -traditional -passin pass:${{ env.NEW_GUID }}
          openssl rsa -in $GITHUB_WORKSPACE/key.pem -pubout > $GITHUB_WORKSPACE/pubkeyonly.pem -passin pass:${{ env.NEW_GUID }}

      # Set variables
      - name: Set environment variables
        run: |
          echo "JSON_FILE_PATH="${{ github.workspace }}/src/customer-key-store/appsettings.json"" >> $GITHUB_ENV
          echo "newClientId=${{ env.appApplicationId }}" >> $GITHUB_ENV
          echo "newTenantId=${{vars.TENANT_ID }}" >> $GITHUB_ENV
          echo "newValidIssuer=${{vars.VALID_ISSUER}}" >> $GITHUB_ENV
          echo "newJwtAudience=https://${{ env.AZURE_WEBAPP_NAME }}.${{ env.DOMAIN_NAME }}" >> $GITHUB_ENV
          echo "newValueKeyName=${{vars.KEY_NAME}}" >> $GITHUB_ENV
          echo "newValueKeyId=${{ env.NEW_GUID }}" >> $GITHUB_ENV
          echo "newValueEmail=${{vars.EMAILS}}" >> $GITHUB_ENV
          echo "newPublicPem=$GITHUB_WORKSPACE/pubkeyonly.pem" >> $GITHUB_ENV
          echo "newPrivatePem=$GITHUB_WORKSPACE/privkeynopass.pem" >> $GITHUB_ENV
  
      # Replace values in appsettings.json
      - name: Update JSON file
        run: python ${{ github.workspace }}/src/customer-key-store/scripts/replace.py
      
      # Show the updated JSON
      - name: Display updated JSON file
        if: false  # Enable or disable the step
        run: cat ${{ github.workspace }}/src/customer-key-store/appsettings.json

      # Build the application
      - name: Build with dotnet
        run: dotnet build ${{ github.workspace }}/src/customer-key-store/customerkeystore.csproj --configuration Release

      - name: dotnet publish
        run: dotnet publish ${{ github.workspace }}/src/customer-key-store/customerkeystore.csproj -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp
      
      # Save certificates for debug purpose
      - name: Archive Certificates
        uses: actions/upload-artifact@v3
        if: false  # Enable or disable the step
        with:
          name: certificates
          path: |
            privkeynopass.pem
            pubkeyonly.pem

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app

      # Login to Azure
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_SUB_PLATFORM_DKE }}
      
      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: logout
        run: |
          az logout
