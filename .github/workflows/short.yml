name: Create app registration

env:
  AZURE_WEBAPP_NAME: app-demo-dke-december    # set this to the name of your Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '8.*'                 # set this to the .NET Core version to use

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  app-registration:
    runs-on: ubuntu-latest

    steps:   
    - uses: actions/checkout@v3

    # Login to Azure
    - name: login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_SUB_PLATFORM_DKE }}
  
    # Show account
    - name: list account
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show

    # Update account in permission file
    - name: update parameter file
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          # Update permission.json with the new principalId using jq (in-place)
          jq --arg principalId "${{ vars.SP_GRP_OBJECT_ID }}" \ # This must be the groups object ID, since it's the group that has the PIM permission and not the members.
            '.principalId = $principalId' \
            iac/application/dke/permission.json -i
                              
    # PIM for application registration permissions
    - name: pim account
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |      
          # Define variables
          API_URL="https://graph.microsoft.com/v1.0/roleManagement/directory/roleAssignmentScheduleRequests"
          BODY_FILE="iac/application/dke/permission.json"
          HEADERS="Content-Type=application/json"

          # Extract the role definition and principal from the permission.json
          PRINCIPAL_ID=$(jq -r '.principalId' $BODY_FILE)
          ROLE_DEFINITION_ID=$(jq -r '.roleDefinitionId' $BODY_FILE)

          # Check if the role assignment already exists using az rest GET
          EXISTING_ASSIGNMENTS=$(az rest --method GET \
            --url "https://graph.microsoft.com/v1.0/roleManagement/directory/roleAssignments" \
            --query "value[?roleDefinitionId=='$ROLE_DEFINITION_ID' && principalId=='$PRINCIPAL_ID']" -o json)

          # Check if the response is empty
          if [[ "$EXISTING_ASSIGNMENTS" == "[]" ]]; then
            echo "Role assignment does not exist. Creating a new role assignment request..."
            # Create the role assignment request
            az rest --method POST \
              --url "$API_URL" \
              --body @$BODY_FILE \
              --headers "$HEADERS"

            # Set variables for the loop if a new role assignment was created
            RETRY_COUNT=0
            MAX_RETRIES=10
            SLEEP_DURATION=15  # Wait 15 seconds between retries

            # Loop to verify the role assignment has taken effect
            echo "Verifying if the role assignment has been applied for principalId: $PRINCIPAL_ID"
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              echo "Checking role assignment... Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"

              # Check if the role assignment is now present
              CURRENT_ASSIGNMENTS=$(az rest --method GET \
                --url "https://graph.microsoft.com/v1.0/roleManagement/directory/roleAssignments" \
                --query "value[?roleDefinitionId=='$ROLE_DEFINITION_ID' && principalId=='$PRINCIPAL_ID']" -o json)

              # If the role assignment is found, exit the loop
              if [[ "$CURRENT_ASSIGNMENTS" != "[]" ]]; then
                echo "Role assignment successfully applied."
                break
              else
                echo "Role assignment has not taken effect yet. Retrying in $SLEEP_DURATION seconds..."
                sleep $SLEEP_DURATION
                RETRY_COUNT=$((RETRY_COUNT + 1))
              fi
            done

            # If the role assignment was not applied after MAX_RETRIES, exit with an error
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Error: Role assignment has not been applied within the expected time."
              exit 1
            fi
          else
            echo "Role assignment already exists. Skipping creation and validation."
          fi
  
    # Create app
    - name: create app
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          # Create the Azure AD app and capture the output
          output=$(az ad app create --display-name ${{ env.AZURE_WEBAPP_NAME }}-${{ github.run_id }})
          
          # Extract the objectId from the output
          objectId=$(echo "$output" | jq -r '.id')
          
          # Debugging output
          echo "output=$output"  # Debugging output
          echo "objectId=$objectId"  # Debugging output
          echo "objectId=$objectId" >> $GITHUB_ENV
  
    # Update app with DKE configuration (configuration related to the DKE)
    - name: update manifest DKE
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az rest --method PATCH \
          --uri "https://graph.microsoft.com/v1.0/applications/${{ env.objectId }}" \
          --body @iac/application/dke/manifest_main.json \
          --headers "Content-Type=application/json"
  
    # Update app with API configuration (client applications that can access the DKE)
    - name: update manifest API
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az rest --method PATCH \
          --uri "https://graph.microsoft.com/v1.0/applications/${{ env.objectId }}" \
          --body @iac/application/dke/manifest_api.json \
          --headers "Content-Type=application/json"